# This is a basic workflow to help you get started with Actions

name: build docker image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: copy env template
        run: cp .env.template .env

      - name: load dotenv file
        uses: xom9ikk/dotenv@v2.3.0

      - name: install sqlx-cli
        uses: taiki-e/install-action@v2
        with:
          tool: nextest,sqlx-cli

      - name: migrate db
        run: |
          cd back
          touch $DATABASE_FILE
          cargo sqlx migrate run

      - name: build and test
        run: |
          docker compose -f compose.test.yml run --build test-back

  e2e-tests:
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    steps:
      - name: build and test
        env:
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          echo $STRIPE_SECRET_KEY

      - name: Check out code
        uses: actions/checkout@v4

      - name: copy env template
        run: cp .env.template .env


      - name: load dotenv file
        uses: xom9ikk/dotenv@v2.3.0


      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: install sqlx-cli
        uses: taiki-e/install-action@v2
        with:
          tool: nextest,sqlx-cli


      - name: log into github container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: migrate db
        run: |
          cd back
          touch $DATABASE_FILE
          cargo sqlx migrate run
          ls -l

      - name: bake
        uses: docker/bake-action@v6
        with:
          load: true
          allow: fs.read=..
          files: compose.e2e.yml
          workdir: e2e
          source: .
          set: |
            *.cache-to=type=gha,mode=max
            *.cache-from=type=gha

      - name: build and test
        env:
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          docker compose -f e2e/compose.e2e.yml run --build e2e

      - name: generate logs
        if: failure()
        run: |
          docker compose -f e2e/compose.e2e.yml logs e2e > e2e/logs_e2e.txt
          docker compose -f e2e/compose.e2e.yml logs test-back > e2e/logs_test-back.txt
          docker compose -f e2e/compose.e2e.yml logs mailer > e2e/logs_mailer.txt
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          path: |
            e2e/videos/**
            e2e/screenshots/**
            e2e/logs_*.txt

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: copy env template
        run: cp .env.template .env

      - name: load dotenv file
        uses: xom9ikk/dotenv@v2.3.0

      - name: install sqlx-cli
        uses: taiki-e/install-action@v2
        with:
          tool: nextest,sqlx-cli

      - name: migrate db
        run: |
          cd back
          touch back $DATABASE_FILE
          cargo sqlx migrate run

      - name: build
        run: |
          docker compose build

      - name: Save Docker image for later use
        run: |
          docker save ghcr.io/eli-sauvage/biere-n-collect:latest -o ./release-image.tar

      - name: Save Docker image as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-image
          path: ./release-image.tar

  push:
    runs-on: ubuntu-latest
    needs: [build, unit-tests, e2e-tests]
    permissions:
      contents: write
      packages: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: copy env template
        run: cp .env.template .env

      - name: load dotenv file
        uses: xom9ikk/dotenv@v2.3.0

      - name: Download the saved Docker image
        uses: actions/download-artifact@v4
        with:
          name: release-image
          path: ./release-image

      - name: ls
        run: |
          ls -la
          ls ./release-image

      - name: Load Docker image
        run: |
          docker load -i ./release-image/release-image.tar

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: eli-sauvage
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: push
        run: |
          docker compose push
